#include <iostream>
#include <fstream>
#include <cmath>




double newton_raphson(double x0, double eps, fptr f, fptr fderiv, int itermax);
double deriv(double x);
void error_itermax(double xr, double fxr, int itermax);
int main (void){


  std::cout.precision(15); std::cout.setf(std::ios::scientific);
  
  const double EPS = 1.0e-8;
  const int ITERMAX = 10000;
  
  double root = newton_raphson(100, EPS, fun, deriv, ITERMAX);
  std::cout << root << "\n";
  



  return 0;
}

double newton_raphson(double x0, double eps, fptr f, fptr fderiv, int itermax)
{
double xr = x0;
  int iter = 0;
  while(1) {
    if (std::fabs(f(xr)) <= eps) {
      break;
    }
    xr = xr - f(xr)/fderiv(xr);
    iter++;
    if (iter > itermax) {
      error_itermax(xr, f(xr), itermax);
      break;
    }
}

double deriv(double x)
{
  return 1 - std::cosh(50/x) + 50*std::sinh(50/x)/x;
}
 
void error_itermax(double xr, double fxr, int itermax)
{
  std::cerr << "############################################\n";
  std::cerr << "# ERROR: max number of iterations reached.\n";
  std::cerr << "# itermax = " << itermax << "\n";
  std::cerr << "# xr = " << xr << "\n";
  std::cerr << "# f(xr) = " << fxr << "\n";
  std::cerr << "############################################\n";
}
